evaluate_expr(tokens)
	if tokens is empty: throw error;
	next_operand = tokens.remove
	if next_token is numberToken:
		return do_operation(tokens, next_token)
	else if next_token is bracketToken:
		evaluate_expr(tokens)
	else: throw error;
	

evaluate_brackets(tokens):
	if tokens.first is bracketToken and !tokens.first.isOpen: throw error;
	result = evaluate_expr(tokens)
	tokens.remove
	tokens.addFirst(result)
	
do_operation(tokens, next_token):
	left_operand = next_token.getNumber
	operation = tokens.remove
	if operation is operationToken:
		if(operation is Multiplication or Division:
			return mult_or_div_operation(left_operand, operation, tokens)
		else:
			return operation(left_operand, evaluete_expr(tokens);

mult_or_div_operation(left_operand, operation, tokens):
	right_token = tokens.first
	if right_token is bracketToken and right_token.isOpen:
		evaluate_brackes(tokens)
		right_token = tokens.remove
	res = operation(left_operand, right_token.number)
	tokens.addFirst(res)
	return evaluate_exp(tokens)
		
